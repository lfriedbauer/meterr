version: '3.8'

services:
  n8n:
    image: n8nio/n8n
    container_name: meterr-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=meterr123
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=http://localhost:5678/
      - N8N_ENCRYPTION_KEY=your-encryption-key-here
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n-workflows:/workflows
    networks:
      - meterr-network

  postgres:
    image: postgres:15
    container_name: meterr-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: meterr
      POSTGRES_PASSWORD: meterr123
      POSTGRES_DB: n8n
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - meterr-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: meterr-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./tools/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - meterr-network

  grafana:
    image: grafana/grafana:latest
    container_name: meterr-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=meterr123
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana_data:/var/lib/grafana
      - ./tools/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./tools/monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - meterr-network

  metrics-collector:
    build: 
      context: ./tools/monitoring/collector
      dockerfile: Dockerfile
    container_name: meterr-metrics
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - REPO_NAME=meterr-ai/meterr
      - NODE_ENV=production
    volumes:
      - ./tools/enforcement/scripts:/app/scripts:ro
      - ./.v0-generations.json:/app/.v0-generations.json
      - ./.v0-stats.json:/app/.v0-stats.json
    networks:
      - meterr-network

volumes:
  n8n_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  meterr-network:
    driver: bridge

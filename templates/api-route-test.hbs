import { NextRequest } from 'next/server';
import { GET, POST, PUT, DELETE } from './route';
import { auth } from '@/lib/auth';

// Mock auth
jest.mock('@/lib/auth', () => ({
  auth: jest.fn()
}));

const mockAuth = auth as jest.MockedFunction<typeof auth>;

describe('/api/{{dashCase name}}', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  {{#if (includes method 'GET')}}
  describe('GET', () => {
    it('should return 401 when not authenticated', async () => {
      mockAuth.mockResolvedValueOnce(null);
      
      const request = new NextRequest('http://localhost/api/{{dashCase name}}');
      const response = await GET(request);
      
      expect(response.status).toBe(401);
      const data = await response.json();
      expect(data.error).toBe('Unauthorized');
    });

    it('should return data when authenticated', async () => {
      mockAuth.mockResolvedValueOnce({
        user: { id: 'user-123', email: 'test@example.com' }
      });
      
      const request = new NextRequest('http://localhost/api/{{dashCase name}}');
      const response = await GET(request);
      
      expect(response.status).toBe(200);
      const data = await response.json();
      expect(data.success).toBe(true);
      expect(data.data).toBeDefined();
    });
  });
  {{/if}}

  {{#if (includes method 'POST')}}
  describe('POST', () => {
    it('should create a new resource', async () => {
      mockAuth.mockResolvedValueOnce({
        user: { id: 'user-123', email: 'test@example.com' }
      });
      
      const request = new NextRequest('http://localhost/api/{{dashCase name}}', {
        method: 'POST',
        body: JSON.stringify({
          // TODO: Add test data
          name: 'Test {{titleCase name}}'
        })
      });
      
      const response = await POST(request);
      
      expect(response.status).toBe(201);
      const data = await response.json();
      expect(data.success).toBe(true);
      expect(data.data.id).toBeDefined();
    });

    {{#if needsValidation}}
    it('should return 400 for invalid input', async () => {
      mockAuth.mockResolvedValueOnce({
        user: { id: 'user-123', email: 'test@example.com' }
      });
      
      const request = new NextRequest('http://localhost/api/{{dashCase name}}', {
        method: 'POST',
        body: JSON.stringify({
          // Invalid data
        })
      });
      
      const response = await POST(request);
      
      expect(response.status).toBe(400);
      const data = await response.json();
      expect(data.error).toBe('Invalid input');
    });
    {{/if}}
  });
  {{/if}}

  {{#if (includes method 'PUT')}}
  describe('PUT', () => {
    it('should update a resource', async () => {
      mockAuth.mockResolvedValueOnce({
        user: { id: 'user-123', email: 'test@example.com' }
      });
      
      const request = new NextRequest('http://localhost/api/{{dashCase name}}', {
        method: 'PUT',
        body: JSON.stringify({
          id: 'resource-123',
          name: 'Updated {{titleCase name}}'
        })
      });
      
      const response = await PUT(request);
      
      expect(response.status).toBe(200);
      const data = await response.json();
      expect(data.success).toBe(true);
    });
  });
  {{/if}}

  {{#if (includes method 'DELETE')}}
  describe('DELETE', () => {
    it('should delete a resource', async () => {
      mockAuth.mockResolvedValueOnce({
        user: { id: 'user-123', email: 'test@example.com' }
      });
      
      const request = new NextRequest('http://localhost/api/{{dashCase name}}?id=resource-123');
      const response = await DELETE(request);
      
      expect(response.status).toBe(200);
      const data = await response.json();
      expect(data.success).toBe(true);
    });
  });
  {{/if}}
});
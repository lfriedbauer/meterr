{
  "architect": "# Meterr.ai MVP Architecture - 1 Week Build Plan\n\n## 🎯 Top 5 Features to Build First\n\n### 1. **Real-time AI Cost Tracking Dashboard**\n- Live cost counter showing spend across OpenAI, Claude, Gemini\n- Beautiful animated charts (daily/weekly spend trends)\n- Cost breakdown by model and API endpoint\n\n### 2. **Chrome Extension - Instant Cost Overlay**\n- Floating widget on ChatGPT, Claude.ai, Gemini that shows:\n  - Current session cost\n  - Total daily spend\n  - Cost per message\n- One-click installation, auto-detects AI platforms\n\n### 3. **Smart Spending Alerts**\n- Real-time notifications when approaching limits\n- Anomaly detection (spike in usage)\n- Daily/weekly budget tracking\n\n### 4. **API Key Proxy with Analytics**\n- Drop-in replacement for OpenAI SDK\n- Zero-config tracking (just change base URL)\n- Automatic cost calculation per request\n\n### 5. **Team Usage Insights**\n- Multi-user support with role-based access\n- Per-user cost breakdown\n- Shareable reports (PDF export)\n\n## 🏗️ Technical Architecture\n\n```mermaid\ngraph TD\n    A[Chrome Extension] -->|WebSocket| B[Next.js App]\n    C[User's AI Apps] -->|Proxy API| B\n    B --> D[Supabase]\n    B --> E[Redis Cache]\n    B --> F[Vercel Edge Functions]\n    \n    B -->|Realtime| G[Dashboard]\n    D -->|PostgREST| B\n    D -->|Realtime| A\n```\n\n### Tech Stack\n- **Frontend**: Next.js 14 (App Router) + Tailwind + Shadcn/ui + Recharts\n- **Backend**: Next.js API Routes + Vercel Edge Functions\n- **Database**: Supabase (PostgreSQL + Realtime + Auth)\n- **Cache**: Upstash Redis (for rate limiting & hot data)\n- **Extension**: Manifest V3 + Plasmo Framework\n\n## 📊 Database Schema\n\n```sql\n-- Users & Auth (handled by Supabase Auth)\nCREATE TABLE organizations (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    name TEXT NOT NULL,\n    subscription_tier TEXT DEFAULT 'trial',\n    monthly_limit DECIMAL(10,2) DEFAULT 1000.00,\n    created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\nCREATE TABLE users (\n    id UUID PRIMARY KEY REFERENCES auth.users(id),\n    organization_id UUID REFERENCES organizations(id),\n    email TEXT UNIQUE NOT NULL,\n    role TEXT DEFAULT 'member',\n    created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Core Tracking\nCREATE TABLE api_calls (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    user_id UUID REFERENCES users(id),\n    organization_id UUID REFERENCES organizations(id),\n    provider TEXT NOT NULL, -- 'openai', 'anthropic', 'google'\n    model TEXT NOT NULL,\n    endpoint TEXT NOT NULL,\n    input_tokens INTEGER,\n    output_tokens INTEGER,\n    cost DECIMAL(10,6) NOT NULL,\n    latency_ms INTEGER,\n    metadata JSONB,\n    created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Aggregated Stats (for fast dashboard)\nCREATE TABLE usage_stats (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    organization_id UUID REFERENCES organizations(id),\n    user_id UUID REFERENCES users(id),\n    date DATE NOT NULL,\n    provider TEXT NOT NULL,\n    total_cost DECIMAL(10,4),\n    total_calls INTEGER,\n    total_tokens INTEGER,\n    UNIQUE(organization_id, user_id, date, provider)\n);\n\n-- Alerts & Budgets\nCREATE TABLE budget_alerts (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    organization_id UUID REFERENCES organizations(id),\n    alert_type TEXT NOT NULL, -- 'daily', 'weekly', 'monthly'\n    threshold DECIMAL(10,2),\n    notification_email TEXT[],\n    is_active BOOLEAN DEFAULT true\n);\n\n-- API Keys (encrypted)\nCREATE TABLE api_keys (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    organization_id UUID REFERENCES organizations(id),\n    key_hash TEXT UNIQUE NOT NULL,\n    name TEXT,\n    last_used TIMESTAMPTZ,\n    created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Indexes for performance\nCREATE INDEX idx_api_calls_org_date ON api_calls(organization_id, created_at DESC);\nCREATE INDEX idx_api_calls_user_date ON api_calls(user_id, created_at DESC);\nCREATE INDEX idx_usage_stats_lookup ON usage_stats(organization_id, date DESC);\n```\n\n## 🔌 API Endpoints\n\n### Core APIs\n```typescript\n// Analytics APIs\nGET  /api/usage/realtime          // WebSocket for live updates\nGET  /api/usage/summary            // Dashboard summary\nGET  /api/usage/history?range=7d   // Historical data\nGET  /api/usage/breakdown          // Cost breakdown by model/user\n\n// Proxy APIs (Edge Functions)\nPOST /api/proxy/openai/*          // OpenAI proxy\nPOST /api/proxy/anthropic/*       // Claude proxy\nPOST /api/proxy/google/*          // Gemini proxy\n\n// Management APIs  \nPOST /api/alerts                  // Create budget alert\nGET  /api/alerts                  // List alerts\nPOST /api/keys/generate           // Generate API key\nGET  /api/team/usage              // Team usage stats\n\n// Export APIs\nGET  /api/export/pdf              // Generate PDF report\nGET  /api/export/csv              // Export raw data\n```\n\n### Webhook Endpoints\n```typescript\nPOST /api/webhooks/usage-spike    // Triggered on anomaly\nPOST /api/webhooks/budget-exceed  // Budget threshold hit\n```\n\n## 🔧 Chrome Extension Capabilities\n\n### Core Features\n```javascript\n// manifest.json capabilities\n{\n  \"permissions\": [\n    \"storage\",\n    \"activeTab\", \n    \"webRequest\",\n    \"https://*.openai.com/*\",\n    \"https://*.anthropic.com/*\",\n    \"https://*.google.com/*\"\n  ],\n  \"host_permissions\": [\n    \"https://chat.openai.com/*\",\n    \"https://claude.ai/*\",\n    \"https://gemini.google.com/*\"\n  ]\n}\n```\n\n### Extension Architecture\n```typescript\n// Content Script - Injects cost overlay\n- Intercepts API calls using MutationObserver\n- Calculates tokens using tiktoken (client-side)\n- Shows floating cost widget\n- Sends data to background script\n\n// Background Script  \n- Maintains WebSocket connection to dashboard\n- Aggregates usage data\n- Handles authentication\n- Syncs with Supabase\n\n// Popup\n- Quick stats view\n- Settings management  \n- Direct link to dashboard\n```\n\n## 🚀 Implementation Priority (Day by Day)\n\n### Day 1-2: Foundation\n- Supabase setup (auth, database, RLS policies)\n- Next.js boilerplate with authentication\n- Basic dashboard layout\n\n### Day 3-4: Core Tracking\n- API proxy endpoints\n- Chrome extension basic version\n- Real-time cost calculation\n\n### Day 5: Dashboard Polish\n- Beautiful charts with Recharts\n- Real-time updates via Supabase\n- Cost breakdown views\n\n### Day 6: Alerts & Teams\n- Budget alerts system\n- Team management\n- Email notifications\n\n### Day 7: Polish & Deploy\n- Error handling\n- Performance optimization\n- Production deployment\n- Demo preparation\n\n## 💎 Impressive Demo Points\n\n1. **\"Wow\" Factor**: Live cost counter ticking up in real-time as you use ChatGPT\n2. **Instant Value**: \"You've already spent $47 this week on AI - did you know that?\"\n3. **Simple Setup**: \"Just install extension - no code changes needed\"\n4. **Team Insight**: \"Sarah from marketing spent 3x more than usual yesterday\"\n5. **ROI Clear**: \"Save 30% on AI costs with our optimization suggestions\"\n\n## 🎨 UI Components (Using Shadcn/ui)\n\n```typescript",
  "marketValidation": "This MVP plan addresses a real pain point for companies using multiple AI providers. As a CTO spending $10k/month, cost visibility and control are critical.  Here's my brutally honest feedback:\n\n**1. Would you pay $99/month for this?**\n\nMaybe. $99/month is palatable if the tool genuinely saves me more than that in wasted AI spend through better monitoring and optimization.  However, the value proposition needs to be clearer.  How much will I *save*?  Focusing on ROI would make this a much easier sell.\n\n**2. What feature would make you sign up TODAY?**\n\n* **Actionable Optimization Insights:**  Don't just show me the costs; tell me *how* to lower them.  For example:\n    * \"Switching from `text-davinci-003` to `gpt-3.5-turbo` for this use case would save you an estimated 40%.\"\n    * \"Your prompt length is contributing significantly to cost. Try these strategies to shorten it...\"\n    * \"You're making redundant API calls.  Caching these responses could save you X%.\"\n\nThis type of actionable advice would be incredibly valuable and a major differentiator.\n\n**3. What's missing that's a deal-breaker?**\n\n* **Integration with billing systems:**  Manual API key entry feels clunky.  Integration with cloud billing (AWS, GCP, Azure) or direct connection to OpenAI/Anthropic/Google billing would be much more streamlined.  This would also ensure accuracy and avoid manual errors.\n* **Lack of optimization features:**  Simply *seeing* the cost isn't enough. I need tools to actively *reduce* it.  Think prompt optimization suggestions, model selection recommendations, or even automated rate limiting based on budgets.\n* **No free trial/freemium tier:**  At $99/month, there's a significant barrier to entry.  A free trial or a limited free tier would allow potential customers to experience the value before committing.\n\n\n**4. How does this compare to just using provider dashboards?**\n\nIt's a step up because it aggregates data from multiple providers into a single view.  However, provider dashboards are free.  To justify the $99/month, Meterr.ai needs to provide significantly more value than just aggregation.  See point #2 above.\n\n\n**In short:** The core idea is solid, but the MVP feels more like a monitoring tool than an optimization platform.  Focus on helping customers *reduce* their AI spend, not just *track* it.  Add actionable insights, integrations, and a free trial/freemium model, and you'll have a much more compelling product.\n",
  "features": [
    {
      "name": "Real-time Cost Dashboard",
      "description": "Live view of AI spending across all providers",
      "userValue": "See exactly where money is being spent right now",
      "technicalRequirements": ["Next.js dashboard", "Supabase database", "Webhook listeners"],
      "estimatedHours": 16
    },
    {
      "name": "Chrome Extension Tracker",
      "description": "Captures usage directly from OpenAI/Claude consoles",
      "userValue": "Zero-setup tracking - just install and go",
      "technicalRequirements": [
        "Chrome manifest v3",
        "Content scripts",
        "Background service worker"
      ],
      "estimatedHours": 12
    },
    {
      "name": "Smart Alerts",
      "description": "Notifications when spending exceeds thresholds",
      "userValue": "Prevent bill shock before it happens",
      "technicalRequirements": [
        "Email integration",
        "Threshold rules engine",
        "Daily aggregation job"
      ],
      "estimatedHours": 8
    },
    {
      "name": "Team Usage Breakdown",
      "description": "See which developers/projects use most tokens",
      "userValue": "Identify waste and optimize team behavior",
      "technicalRequirements": ["User attribution", "Project tagging", "Analytics queries"],
      "estimatedHours": 10
    },
    {
      "name": "Export & Reports",
      "description": "PDF/CSV reports for finance teams",
      "userValue": "Easy expense reporting and budgeting",
      "technicalRequirements": ["PDF generation", "CSV export", "Report templates"],
      "estimatedHours": 6
    }
  ]
}

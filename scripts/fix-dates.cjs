#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const glob = require('glob');

// Get today's date
const TODAY = new Date().toISOString().split('T')[0]; // 2025-01-15
const YEAR = new Date().getFullYear(); // 2025
const MONTH = String(new Date().getMonth() + 1).padStart(2, '0'); // 01
const TIMESTAMP = new Date().toISOString(); // Full ISO timestamp

// Color output for terminal
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m'
};

console.log(`${colors.blue}🗓️  Fixing dates to: ${colors.bright}${TODAY}${colors.reset}\n`);

// Patterns to find and replace
const DATE_PATTERNS = [
  // YAML frontmatter dates
  {
    pattern: /last_updated:\s*\d{4}-\d{2}-\d{2}/g,
    replacement: `last_updated: ${TODAY}`,
    description: 'YAML frontmatter'
  },
  // Markdown "Last updated" lines
  {
    pattern: /Last updated:\s*\d{4}-\d{2}-\d{2}/g,
    replacement: `Last updated: ${TODAY}`,
    description: 'Markdown dates'
  },
  // Copyright years
  {
    pattern: /Copyright\s*(?:©|\(c\))?\s*\d{4}/gi,
    replacement: `Copyright © ${YEAR}`,
    description: 'Copyright years'
  },
  {
    pattern: /©\s*\d{4}\s+/g,
    replacement: `© ${YEAR} `,
    description: 'Copyright symbols'
  },
  // Date comments in code
  {
    pattern: /\/\/\s*Date:\s*\d{4}-\d{2}-\d{2}/g,
    replacement: `// Date: ${TODAY}`,
    description: 'Code comments'
  },
  {
    pattern: /\/\*\s*Date:\s*\d{4}-\d{2}-\d{2}\s*\*\//g,
    replacement: `/* Date: ${TODAY} */`,
    description: 'Block comments'
  },
  // Package.json version dates (if you use date-based versions)
  {
    pattern: /"lastUpdated":\s*"[\d-T:.Z]+"/g,
    replacement: `"lastUpdated": "${TIMESTAMP}"`,
    description: 'JSON timestamps'
  },
  // Common date formats in docs
  {
    pattern: /\*Updated:\s*\d{4}-\d{2}-\d{2}\*/g,
    replacement: `*Updated: ${TODAY}*`,
    description: 'Doc updates'
  },
  // Version headers
  {
    pattern: /Version \d+\.\d+\.\d+ \(\d{4}-\d{2}-\d{2}\)/g,
    replacement: (match) => {
      const version = match.match(/\d+\.\d+\.\d+/)[0];
      return `Version ${version} (${TODAY})`;
    },
    description: 'Version headers'
  }
];

// File patterns to check
const FILE_PATTERNS = [
  '**/*.md',
  '**/*.mdx',
  '**/*.ts',
  '**/*.tsx',
  '**/*.js',
  '**/*.jsx',
  '**/package.json',
  '**/*.yaml',
  '**/*.yml',
  '**/README*'
];

// Directories to ignore
const IGNORE_DIRS = [
  'node_modules/**',
  '.next/**',
  '.turbo/**',
  'dist/**',
  'build/**',
  '.git/**',
  'coverage/**'
];

let totalFixed = 0;
let filesChanged = 0;

// Process each file type
FILE_PATTERNS.forEach(filePattern => {
  const files = glob.sync(filePattern, { 
    ignore: IGNORE_DIRS,
    nodir: true 
  });
  
  files.forEach(file => {
    let content = fs.readFileSync(file, 'utf8');
    let originalContent = content;
    let fileFixCount = 0;
    
    DATE_PATTERNS.forEach(({ pattern, replacement, description }) => {
      const matches = content.match(pattern);
      if (matches) {
        if (typeof replacement === 'function') {
          content = content.replace(pattern, replacement);
        } else {
          content = content.replace(pattern, replacement);
        }
        fileFixCount += matches.length;
        console.log(`  ${colors.green}✓${colors.reset} Fixed ${matches.length} ${description} in ${colors.yellow}${file}${colors.reset}`);
      }
    });
    
    if (content !== originalContent) {
      fs.writeFileSync(file, content, 'utf8');
      filesChanged++;
      totalFixed += fileFixCount;
    }
  });
});

// Summary
console.log(`\n${colors.bright}📊 Summary:${colors.reset}`);
console.log(`  Files changed: ${colors.green}${filesChanged}${colors.reset}`);
console.log(`  Total dates fixed: ${colors.green}${totalFixed}${colors.reset}`);
console.log(`  Current date: ${colors.blue}${TODAY}${colors.reset}\n`);

// Optional: Create a date constants file
const dateConstantsPath = path.join(process.cwd(), 'lib', 'constants', 'dates.ts');
const dateConstants = `// Auto-generated by fix-dates.js
// Last run: ${TIMESTAMP}

export const CURRENT_DATE = '${TODAY}';
export const CURRENT_YEAR = ${YEAR};
export const CURRENT_MONTH = '${MONTH}';
export const LAST_BUILD = '${TIMESTAMP}';

// Dynamic helpers (always current)
export const getDynamicDate = () => new Date().toISOString().split('T')[0];
export const getDynamicYear = () => new Date().getFullYear();
export const getDynamicTimestamp = () => new Date().toISOString();

// Copyright
export const COPYRIGHT = \`© \${getDynamicYear()} Meterr.ai. All rights reserved.\`;
`;

// Ensure directory exists
const dateConstantsDir = path.dirname(dateConstantsPath);
if (!fs.existsSync(dateConstantsDir)) {
  fs.mkdirSync(dateConstantsDir, { recursive: true });
}

fs.writeFileSync(dateConstantsPath, dateConstants);
console.log(`${colors.green}✓${colors.reset} Created date constants at ${colors.yellow}lib/constants/dates.ts${colors.reset}`);